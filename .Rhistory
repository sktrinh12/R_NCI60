wines.ratio<-wines.eigval[1]/wines.eigval[2]
wines.ratio
round(sqrt(wines.munits/wines.ratio*sqrt(0.75)))
wines.eigval
wines.munits
54/580
580*sqrt(0.75)
54/502
wines.size2
wines.cov
nrow(d.somtrain)
wine.classes
wines.som<-som(wines.Xtrain,somgrid(5,5,"hexagonal"))
plot(wines.som,"changes")
wines.grid<-somgrid(5,5,"hexagonal")
wines.grid$n.hood<-"circular"
wines.nhbrdist<-unit.distances(wines.grid, FALSE)
wines.r<-quantile(wines.nhbrdist, 0.67) * c(1, -1)
wines.som<-supersom(wines.Xtrain,wines.grid,rlen=200,alpha=c(0.05,0.01),keep.data=T)
plot(wines.som,"changes")
plot(wines.som,"dist.neighbours")
wines.hc<-cutree(hclust(dist(wines.som$codes)),3)
plot(wines.som,"codes",bgcol=rainbow(3)[wines.hc])
plot(wines.som,"mapping",bgcol=rainbow(3)[wines.hc])
wines.hc<-cutree(hclust(dist(wines.som$codes)),3)
wines.hc<-cutree(hclust(dist(wines.som$codes[[1]])),3)
plot(wines.som,"mapping",bgcol=rainbow(3)[wines.hc])
plot(wines.som,"changes")
plot(wines.som,"dist.neighbours")
plot(wines.som,"mapping",bgcol=rainbow(3)[wines.hc])
add.cluster.boundaries(wines.som,wines.hc)
plot(wines.som,"mapping",col=brewer.pal(9,"Set1")[as.factor(row.names(wines.som$codes[[1]]))],bgcol="lightgrey")
wines.class<-wines.som$unit.classif
winesom.pred<-predict(wines.som,newdata=wines.Xtest,trainX=wines.Xtrain,trainY=factor(wines.class[wines.train]))
winesom.pred<-predict(wines.som,newdata=wines.test,trainX=wines.Xtrain,trainY=factor(wines.class[wines.train]))
table(wines.class[-wines.train],winesom.pred$predictions)
wines.class[-wines.train]
winesom.pred$predictions
table(wines.class[-wines.train],winesom.pred$predictions[[1]])
wines.class[-wines.train]
winesom.pred$predictions
wines.som<-som(wines.Xtrain,wines.grid,rlen=200,alpha=c(0.05,0.01),keep.data=T)
plot(wines.som,"changes")
plot(wines.som,"dist.neighbours")
wines.class<-wines.som$unit.classif
winesom.pred<-predict(wines.som,newdata=wines.test,trainX=wines.Xtrain,trainY=factor(wines.class[wines.train]))
table(wines.class[-wines.train],winesom.pred$predictions[[1]])
winesom.pred
winesom.pred$predictions
winesom.pred$predictions[[1]]
winesom.pred
wines.untrain.class<-winesom.pred$unit.classif
plot(wines.som,"dist.neighbours")
plot(wines.som,"changes")
plot(wines.som,"dist.neighbours")
plot(wines.som,"counts")
plot(wines.som,"mapping",bgcol=rainbow(3)[wines.hc])
map(wines.som,wines.test)
wines.untrain.class
wines.test
dim(wines.test)
wines.test[1,]
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
##Data Generation
#############################################
set.seed(11)
# pick 2 main colors to act as cluster centers
col_label <- c("green","yellow")
r <- c(0, 240)
g <- c(158, 228)
b <- c(115, 66)
col_palette <- cbind.data.frame(r,g,b,col_label)
size <- c(10,20)
col_palette
size
length(col_label)
?rnorm
col_palette$r[1]
col_palette$r[2]
# simulate similar color values around the 2 main colors
d <- NULL
n <- 500
for (i in 1:length(col_label))  {
sd <- size[i]
r <- rnorm(n=n, mean=col_palette$r[i], sd=sd) #random normal dist
g <- rnorm(n=n, mean=col_palette$g[i], sd=sd)
b <- rnorm(n=n, mean=col_palette$b[i], sd=sd)
label <- col_palette$col_label[i]
# consolidate into dataset
rgb <- cbind.data.frame(b,r,g,label)
d <- rbind.data.frame(d,rgb)
}
d
dim(rgb)
dim(d)
rgb_out <- which(d[,1:3]<0 | d[,1:3]>255, arr.ind = T)
rgb_out
duplicated(rgb_out)
nrow(rgb_out)
nrow(unique(rgb_out[,1]))
length(unique(rgb_out[,1]))
rgb_out[,1]
names(rgb_out[,1])
rgb_out
duplicated(rgb_out[,1])
rgb_out[,1][duplicated(rgb_out[,1])]
?duplicated
which(rgb_out[,1]==584)
which(rgb_out[c(276,382),1]==584)
rgb_out[c(276,382),1]
rgb_out <- unique(rgb_out[,1]) #remove dups bc there might be dups across rows (either in r,g or b)
d <- d[-rgb_out,]
d
d$hex <- rgb(d$r, d$g, d$b, max=255)
d
chosen_dim <- c(1,3)
plot(d[,chosen_dim],
xlab = "Blue Value",
ylab = "Green Value",
col=d$hex, pch=16,
ylim=c(130,255), xlim=c(0,150))
library(scatterplot3d)
install.packages("scatterplot3d")
library(scatterplot3d)
scatterplot3d(d[,1:3],
color=d$hex, pch=20,
col.grid="grey",
xlab="Blue Value",
ylab="Red Value",
zlab="Green Value")
install.packages("SOMbrero")
require(SOMbrero)
niter <- 200
grid_dim <- 8
set.seed(11)
my.som <- trainSOM(d[,1:3], dimension=c(grid_dim, grid_dim),
nb.save=niter/2, maxit=niter,
radius.type="letremy")
?trainSOM
my.som <- trainSOM(d[,1:3], dimension=c(grid_dim, grid_dim),
nb.save=niter/2, maxit=niter,
radius.type="korresp") #author of paper; handles non-vectorial data implemented in their stochastic versions
my.som <- trainSOM(d[,1:3], dimension=c(grid_dim, grid_dim),
nb.save=niter/2, maxit=niter,
radius.type="letremy") #author of paper;
my.som <- trainSOM(d[,1:3], dimension=c(grid_dim, grid_dim),
nb.save=niter/2, maxit=niter,
radius.type=letremy) #author of paper;
my.som <- trainSOM(d[,1:3], dimension=c(grid_dim, grid_dim),
nb.save=niter/2, maxit=niter) #author of paper;
dim(d[,1:3])
598+3
601*5
my.som <- SOMbrero::trainSOM(d[,1:3], dimension=c(grid_dim, grid_dim),
nb.save=niter/2, maxit=niter,radius.type="letremy") #author of paper;
summary(my.som)
plot(my.som, what="energy")
npt <- grid_dim^2
steps <- my.som$backup$steps
my.som$clustering
my.som$prototypes
my.som$energy
my.som$backup
?SOMbrero
my.som$prototypes
my.som$prototypes[[1]]
my.som$prototypes[1
my.som$prototypes[1]
my.som$prototypes[1][,1:3]
chosen_dim
my.som$prototypes[1][,c(1,3)]
my.som$prototypes[[1]][,c(1,3)]
my.som$prototypes[,c(1,3)]
# plot map on each iteration
npt <- grid_dim^2
steps <- my.som$backup$steps
for (s in 1:length(steps))  {
# get neuron coordinates
iterate_map <- my.som$backup$prototypes[[s]][,chosen_dim] #dim=(1,3), prototype = bmu
# plot
plot(d[,chosen_dim], col=d$hex,
pch=16, cex=.5,
main=paste('Iteration ', steps[s]),
xlim=c(0,150),
ylim=c(130,255))
points(iterate_map)
for (pt in 1:npt) {
# identify grid neighbors
pt_neighbor <- c(pt-1,pt+1,
pt+grid_dim,pt-grid_dim)
# remove out-of-range neighbors
rm_out <- which(pt_neighbor < 1 | pt_neighbor > npt)
# remove criss-cross links
if ((pt %% grid_dim) == 0) {
rm_crisscross <- which(pt_neighbor == (pt+1))
}
if ((pt %% grid_dim) == 1) {
rm_crisscross <- which(pt_neighbor == (pt-1))
}
pt_neighbors <- pt_neighbor[-c(rm_out,rm_crisscross)]
for(i in pt_neighbors)  {
lines(x <- c(iterate_map[pt,1],iterate_map[i,1]),
y <- c(iterate_map[pt,2],iterate_map[i,2]))
}
}
}
my.som$backup$prototypes
steps
length(steps)
iterate_map
my.som$backup$prototypes[[100]]
grid_dim
nrow(iterate_map)
pt_neighbor
rm_crisscross
plot(d[,chosen_dim],col=d$hex,pch=16,cex=0.5,main=paste('iteration',step[64]),xlim=c(0,150),ylim=c(130,255))
plot(d[,chosen_dim],col=d$hex,pch=16,cex=0.5,main=paste('iteration',step[63]),xlim=c(0,150),ylim=c(130,255))
plot(d[,chosen_dim],col=d$hex,pch=16,cex=0.5,main=paste('iteration',steps[64]),xlim=c(0,150),ylim=c(130,255))
points(iterate_map)
length(iterate_map)
length(pt_neighbor)
rm_out
rm_crisscross
pt_neighbors
iterate_map[64,1]
x
lines(x,y)
iterate_map
y
x
pt_neighbors
plot(d[,chosen_dim], col=d$hex,
pch=16, cex=.5,
main=paste('Iteration ', steps[s]),
xlim=c(0,150),
ylim=c(130,255))
points(iterate_map) #the black dots are bmus or prototypes; 64 points
for (pt in 1:npt) {
# identify grid neighbors
pt_neighbor <- c(pt-1,pt+1,
pt+grid_dim,pt-grid_dim)
# remove out-of-range neighbors
rm_out <- which(pt_neighbor < 1 | pt_neighbor > npt)
pt_neighbors <- pt_neighbor[-rm_out]
for(i in pt_neighbors)  {
lines(x <- c(iterate_map[pt,1],iterate_map[i,1]), #pt=64,i=63
y <- c(iterate_map[pt,2],iterate_map[i,2])) #pt=64,i=56
}
}
}
plot(d[,chosen_dim], col=d$hex,
pch=16, cex=.5,
main=paste('Iteration ', steps[s]),
xlim=c(0,150),
ylim=c(130,255))
points(iterate_map) #the black dots are bmus or prototypes; 64 points
for (pt in 1:npt) {
# identify grid neighbors
pt_neighbor <- c(pt-1,pt+1,
pt+grid_dim,pt-grid_dim)
# remove out-of-range neighbors
rm_out <- which(pt_neighbor < 1 | pt_neighbor > npt)
pt_neighbors <- pt_neighbor[-rm_out]
for(i in pt_neighbors)  {
lines(x <- c(iterate_map[pt,1],iterate_map[i,1]), #pt=64,i=63
y <- c(iterate_map[pt,2],iterate_map[i,2])) #pt=64,i=56
}
}
#}
knitr::opts_chunk$set(echo = TRUE)
##Data Generation##############
set.seed(11)
# pick 2 main colors to act as cluster centers
col_label <- c("green","yellow")
r <- c(0, 240)
g <- c(158, 228)
b <- c(115, 66)
col_palette <- cbind.data.frame(r,g,b,col_label)
size <- c(10,20)
##simulate similar color values around the 2 main colors###
d <- NULL
n <- 500
for (i in 1:length(col_label))  {
sd <- size[i]
r <- rnorm(n=n, mean=col_palette$r[i], sd=sd) #random normal dist
g <- rnorm(n=n, mean=col_palette$g[i], sd=sd)
b <- rnorm(n=n, mean=col_palette$b[i], sd=sd)
label <- col_palette$col_label[i]
# consolidate into dataset
rgb <- cbind.data.frame(b,r,g,label)
d <- rbind.data.frame(d,rgb) #to combine both the yellow df and green df, both of nrow() = 500
}
# remove out-of-range RGB values
rgb_out <- which(d[,1:3]<0 | d[,1:3]>255, arr.ind = T)
rgb_out <- unique(rgb_out[,1]) #remove dups bc there might be dups across rows (either in r,g or b)
d <- d[-rgb_out,]
# add hex values, more convenient to feed into R plotting commands
d$hex <- rgb(d$r, d$g, d$b, max=255)
# plot and save chosen colors
chosen_dim <- c(1,3)
plot(d[,chosen_dim],
xlab = "Blue Value",
ylab = "Green Value",
col=d$hex, pch=16,
ylim=c(130,255), xlim=c(0,150))
# plot in 3D
library(scatterplot3d)
scatterplot3d(d[,1:3],
color=d$hex, pch=20,
col.grid="grey",
xlab="Blue Value",
ylab="Red Value",
zlab="Green Value")
# Data Analysis
#############################################
# install and load package
require(SOMbrero)
# set number of iterations
niter <- 200
#maxit= (nrow+ncol)*5; if not set
# train SOM
grid_dim <- 8 #typically m1=m2 = sqrt(n/10)
set.seed(11)
my.som <- SOMbrero::trainSOM(d[,1:3], dimension=c(grid_dim, grid_dim),
nb.save=niter/2, maxit=niter,radius.type="letremy") #author of paper;it is neighbourhood type, default is guassian, this is a piecewise linear neigbourhood; piece-wise linear fxs approximate to a continous fx
64%%8
sapply(seq(64),function(x) x%%8)
t<-sapply(seq(64),function(x) x%%8)
t[-which(t==1 | t==0)]
1%%8
9%%8
25%%8
which(t==1)
t[which(t==1)]
c(41-1,41+2,41+8,41-8)
# radar plot for each neuron
plot(my.som, what="obs", type="radar",
key.loc=c(-0.5,5), mar=c(0,10,2,0))
?SOMbrero::plot.somRes
plot(my.som, what="obs", type="radar",
key.loc=c(-0.5,5))#, mar=c(0,10,2,0))
plot(my.som, what="obs", type="radar"),
plot(my.som, what="obs", type="radar"),
plot(my.som, what="obs", type="radar")#,
plot(my.som, what="obs", type="radar",
key.loc=c(-0.5,5), mar=c(0,10,2,0))
plot(my.som, what="prototypes", type="smooth.dist")
dummy1 <- as.numeric(d$label==levels(d$label)[1])
dummy2 <- as.numeric(d$label==levels(d$label)[2])
dummy1
d$label
dummy_labels <- cbind(dummy1, dummy2)
dummy_labels
colnames(dummy_labels) <- levels(d$label)
head(dummy_labels)
aggregate(d$label)
aggregate(d$label,"green")
aggregate(d$label,"green",count)
# plot
plot(my.som, what="add",
type="words", variable=dummy_labels)
?mar
plot(my.som, what="add",
type="words", variable=dummy_labels,mar=c(0,-0.5,0.5,0))
# plot
plot(my.som, what="add",
type="words", variable=dummy_labels,mar=c(0,-0.5,0.5,0))
# plot
plot(my.som, what="add",
type="words", variable=dummy_labels)
# label neurons based on color prediction
plot(my.som, what="add",
type="color", variable=dummy_labels[,1])
dummy_labels[,1]
colnames(dummy_labels)
plot(my.som, what="add",
type="color", variable=dummy_labels[,2]) # based on what is green
# label neurons based on color prediction
plot(my.som, what="add",
type="color", variable=dummy_labels[,1]) # based on what is green will be coloured red
####################################################
# Clustering of Neurons
####################################################
my.clusters <- superClass(my.som, k=2)
summary(my.clusters)
?superClass
plot(my.clusters, plot.var=FALSE) #a boolena indicating whether a graph showing the evolution of the explained variance should be plotted, used when type="dendrogram"
plot(my.clusters, type='grid', plot.legend=TRUE)
plot(my.clusters, type="hitmap", plot.legend=TRUE)
####################################################
# Making Predictions
####################################################
library(kohonen)
# train model
my.som2 <- xyf(as.matrix(d[,1:3]), as.factor(d$label),
grid=somgrid(grid_dim, grid_dim, "rectangular"))
?xyf
my.som2 <- xyf(as.matrix(d[,1:3]),# as.factor(d$label),
grid=somgrid(grid_dim, grid_dim, "rectangular"))
data(yeast)
yeast
head(yeast)
as.factor(d$label)
vnitages
vintages
my.som2 <- xyf(scale(as.matrix(d[,1:3])), as.factor(d$label),
grid=somgrid(grid_dim, grid_dim, "rectangular"))
summary(my.som2)
som.predictions <- predict(my.som2)
som.predictions
head(som.predictions$predictions)
head(som.predictions$predictions[[1]])
head(som.predictions$unit.predictions[[1]])
table(som.predictions$predictions[[2]], d$label)
som.predictions$predictions
boxplot(my.som2$distances ~ d$label)
som.predictions$unit.predictions
summary(som_model)
fived.cluster<-superClass(som_model,k=9)
fived.somb<-SOMbrero::trainSOM(dmat.somtrain, dimension=c(size2, size1),
nb.save=niter/2, maxit=niter,radius.type="letremy")
size1
size2
fived.somb<-SOMbrero::trainSOM(dmat.somtrain, dimension=c(size2, size1),
nb.save=150/2, maxit=150,radius.type="letremy")
warnings()
d[,1:3]
dmat.somtrain
typeof(d[,1:3])
typeof(dmat.somtrain)
str(dmat.somtrain)
str(d[,1:3])
fived.somb<-SOMbrero::trainSOM(d.somtrain), dimension=c(size2, size1),
nb.save=150/2, maxit=150,radius.type="letremy")
fived.somb<-SOMbrero::trainSOM(d.somtrain, dimension=c(size2, size1),
nb.save=150/2, maxit=150,radius.type="letremy")
head(d.somtrain)
fived.somb<-SOMbrero::trainSOM(d.somtrain[,-1], dimension=c(size2, size1),
nb.save=150/2, maxit=150,radius.type="letremy")
warnings()
my.som <- SOMbrero::trainSOM(d[,1:3], dimension=c(grid_dim, grid_dim),
nb.save=niter/2, maxit=niter,radius.type="letremy") #author of paper;it is neighbourhood type, default is guassian, this is a piecewise linear neigbourhood; piece-wise linear fxs approximate to a continous fx
summary(my.som)
names(d))
names(d)
row.names(d)
row.names(d.somtrain)
row.names(dmat.somtrain)
t<-data.frame(dmat.somtrain)
head(t)
row.names(t)<-c()
head(t)
fived.somb<-SOMbrero::trainSOM(t, dimension=c(size2, size1),
nb.save=150/2, maxit=150,radius.type="letremy")
?trainSOM
fived.somb<-SOMbrero::trainSOM(t, dimension=c(size2, size1),
nb.save=150/2, maxit=150,radius.type="guassian")
fived.somb<-SOMbrero::trainSOM(t, dimension=c(size2, size1),
nb.save=150/2, maxit=150,radius.type="gaussian")
fived.somb<-SOMbrero::trainSOM(t, dimension=c(size2, size1),
maxit=150,radius.type="gaussian")
fived.somb<-SOMbrero::trainSOM(t, dimension=c(size2, size1),
maxit=150,radius.type="letremy")
warnings(0)
fived.somb<-SOMbrero::trainSOM(dmat.somtrain, dimension=c(size2, size1),
maxit=150,radius.type="letremy")
fived.somb<-SOMbrero::trainSOM(d.somtrain, dimension=c(size2, size1),
maxit=150,radius.type="letremy")
d[,1:3]
devtools::install_url("http://cran.r-project.org/src/contrib/rmarkdown0.5.1.tar.gz")
install.packages("devtools")
devtools::install_url("http://cran.r-project.org/src/contrib/rmarkdown0.5.1.tar.gz")
install.packages('curl')
devtools::install_url("http://cran.r-project.org/src/contrib/rmarkdown0.5.1.tar.gz")
install.packages('RCurl')
devtools::install_url("http://cran.r-project.org/src/contrib/rmarkdown0.5.1.tar.gz")
devtools::install('rmarkdown')
install.packages('rmarkdown')
install.packages("base64enc", type="binary")
install.packages("jsonlite", type="binary")
install.packages('rmarkdown')
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
install.packages(data.table)
install.packages('data.table')
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(kohonen)
install.packages('kohonen')
library(data.table)
library(kohonen)
trainSOM<-function(som_grid, data,w=c(1)){
set.seed(7)
som_grid$n.hood<-"circular"
nhbrdist<-unit.distances(som_grid, FALSE) #sets up a grid of units, of a specified size and topology. Distances between grid units are calculated by function unit.distances
r<-quantile(nhbrdist, 0.67) * c(1, -1)
som_model<-supersom(data,grid=som_grid,rlen=150, maxNA.fraction = .9, keep.data = T,
alpha=c(0.05,0.01), radius=r)
return(som_model)
}
#r - the radius of the neighbourhood, either given as a single number or a vector (start, stop). If it is given as a single number the radius will run from the given number to the negative value of that number; as soon as the neighbourhood gets smaller than one only the winning unit will be updated. The default is to start with a value that covers 2/3 of all unit-to-unit distances.
#maxNA.fx -  the maximal fraction of values that may be NA to prevent the row or column to be removed.
d<-fread("C:\\users\\trinh\\Documents\\R\\NCI60_5dose\\CANCER_5_DOSE_DATA.csv")
d.som.train<-data.frame(d[sample(nrow(d),1600),]) # however many you'd like
rownames(d.som.train)<-d.som.train$V1
dim(d.som.train)[1]
nrow(d.som.train)
#### estimate the size of the grid
d.c<-cov(d.som.train[,-1],use="pairwise.complete.obs")
d.som.train[,-1]
